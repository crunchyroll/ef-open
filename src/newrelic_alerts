import boto3
import requests
import json
import logging
import itertools
from ef_service_registry import EFServiceRegistry
from ef_utils import kms_decrypt


class NewRelic:

  #TODO: Move account-specific settings outside class

  encrypted_token = ("AQICAHgnK9qmyWCnKC++2JqZC4P/zUXLQ2qPfIfa7a2gf7JRfgG8SMLWBlNuxHkQeku62gNkAAAAfjB8BgkqhkiG9w0BBwagb"
  "zBtAgEAMGgGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMfxQ3LF3UcfhBxY6QAgEQgDt0Oil5pNQtcixGWz4QA9ZBPi/XmEjKkjf8XzGnXDtXnS+vV"
  "4xk6Ffew6qGUQcE+e0Hx/ctx996b4eJPQ==")

  warning_channels = ['slack-warn']
  critical_channels = ['slack-critical']

  def __init__(self, kms_client):
    self.kms = kms_client
    self.decrypted_token = kms_decrypt(self.kms, self.encrypted_token)
    self.auth_header =  {'X-Api-Key': self.decrypted_token, 'Content-Type': 'application/json'}
    self.all_alerts = None
    self.all_channels = None
    self.refresh_all_alerts()
    self.refresh_all_channels()

  def refresh_all_alerts(self):
    get_alerts = requests.get(
      url='https://api.newrelic.com/v2/alerts_policies.json',
      headers=self.auth_header
    )
    get_alerts.raise_for_status()
    self.all_alerts = get_alerts.json()['policies']

  def refresh_all_channels(self):
    get_channels = requests.get(
      url='https://api.newrelic.com/v2/alerts_channels.json',
      headers=self.auth_header
    )
    get_channels.raise_for_status()
    self.all_channels = get_channels.json()['channels']

  def alert_policy_exists(self, policy_name):
    """Check to see if an alert policy exists in NewRelic. Return True if so, False if not"""
    if next((policy for policy in self.all_alerts if policy['name'] == policy_name), False):
      return True

  def create_alert_policy(self, policy_name):
    """Creates an alert policy in NewRelic"""
    policy_data = { 'policy': { 'incident_preference': 'PER_POLICY', 'name': policy_name } }
    headers = {'X-Api-Key': self.decrypted_token, 'Content-Type': 'application/json'}
    create_policy = requests.post(
      'https://api.newrelic.com/v2/alerts_policies.json',
      headers=headers,
      data=json.dumps(policy_data))
    create_policy.raise_for_status()
    policy_id = create_policy.json()['policy']['id']
    self.refresh_all_alerts()
    return policy_id

  def add_policy_channels(self, policy_id, channel_ids):
    payload = { 'policy_id': policy_id, 'channel_ids': channel_ids}
    put_channels = requests.put(
      url='https://api.newrelic.com/v2/alerts_policy_channels.json',
      headers=self.auth_header,
      params=payload
    )
    put_channels.raise_for_status()
    return

  def delete_policy_channel(self, policy_id, channel_id):
    payload = {'policy_id': policy_id, 'channel_id': channel_id}
    delete_channel = requests.delete(
      url='https://api.newrelic.com/v2/alerts_policy_channels.json',
      headers=self.auth_header,
      params=payload
    )
    delete_channel.raise_for_status()
    return

  def create_alert_cond(self, policy_id, condition_name, alert_condition, threshold, ec2_tag):
    payload = {
       "data":{
          "type":"infra_metric",
          "name":condition_name,
          "enabled":True,
          "filter": {"and":[{"is":{"ec2Tag_Name":ec2_tag}}]},
          "policy_id":policy_id,
          "event_type":"SystemSample",
          "select_value":alert_condition,
          "comparison":"above",
          "critical_threshold":{
             "value":threshold,
             "duration_minutes":5,
             "time_function":"all"
          }
       }
    }
    add_policy = requests.post(
      url='https://infra-api.newrelic.com/v2/alerts/conditions',
      headers=self.auth_header,
      data=json.dumps(payload)
    )
    add_policy.raise_for_status()
    return add_policy.json()['data']['id']

def main():
  kms = boto3.client('kms')
  registry = EFServiceRegistry()
  alert_environments = ["staging", "prod"]
  newrelic = NewRelic(kms_client=kms)

  logging.basicConfig(level=logging.INFO)
  logger = logging.getLogger(__name__)

  for service in registry.iter_services(service_group="application_services"):
    service_name = service[0]
    service_environments = service[1]['environments']
    service_alerts = service[1]['alerts'] if "alerts" in service[1] else {}

    # Set Alert Values
    alerts = { "warning": {}, "critical": {}}
    # alerts['warning']['memory'] = int(service_alerts['memory_warn']) if "memory_warn" in service_alerts else 80
    # alerts['critical']['memory'] = int(service_alerts['memory_crit']) if "memory_crit" in service_alerts else 90
    alerts['warning']['cpuPercent'] = int(service_alerts['cpu_warn']) if "cpu_warn" in service_alerts else 80
    alerts['critical']['cpuPercent'] = int(service_alerts['cpu_crit']) if "cpu_crit" in service_alerts else 90

    # Iterate through all permutations of environment/service
    policy_names = [service_name, "{}-warn".format(service_name)]
    environments = [env for env in alert_environments if env in service_environments]
    for env, policy in itertools.product(environments, policy_names):
      policy_name = "-".join((env, policy))

      # Create service alert policy if it doesn't already exist
      if not newrelic.alert_policy_exists(policy_name):
        newrelic.create_alert_policy(policy_name)
        logger.info("Create alert policy {}".format(policy_name))

      policy_id = next(policy['id'] for policy in newrelic.all_alerts if policy['name'] == policy_name)
      alert_level = "warning" if "-warn" in policy_name else "critical"
      alert_channels = newrelic.critical_channels if alert_level == "critical" and env == "prod" else newrelic.warning_channels

      # Add/Delete alert policy notification channels
      add_channel_ids = []
      delete_channel_ids = []
      for channel in newrelic.all_channels:
        if channel['name'] in alert_channels:
          if policy_id not in channel['links']['policy_ids']:
            add_channel_ids.append(channel['id'])
        elif policy_id in channel['links']['policy_ids']:
          delete_channel_ids.append(channel['id'])

      if add_channel_ids:
        newrelic.add_policy_channels(policy_id, add_channel_ids)
        logger.info("Added channel_ids {} to policy {}".format(policy_name, add_channel_ids))
      if delete_channel_ids:
        for channel_id in delete_channel_ids:
          newrelic.delete_policy_channel(policy_id, channel_id)
          logger.info("Removed channel_id {} from policy {}".format(channel_id, policy_name))

      # Create Alert Conditions for policies
      for k,v in alerts[alert_level].items():
        alert_cond = newrelic.create_alert_cond(
          policy_id=policy_id,
          condition_name=k,
          alert_condition=k,
          threshold=v,
          ec2_tag=policy_name.replace("-warn", "")
        )
        logger.info("created alert condition {} for policy {}".format(alert_cond, policy_name))

if __name__ == "__main__":
  main()
