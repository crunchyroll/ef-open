import boto3
import requests

from ef_service_registry import EFServiceRegistry
from ef_utils import kms_decrypt

kms = boto3.client('kms')
encrypted_token = ("AQICAHgnK9qmyWCnKC++2JqZC4P/zUXLQ2qPfIfa7a2gf7JRfgGoNQDWh1MGPNk/kobNo0OVAAAAjjCBiwYJKoZIhvcNAQcG"
  "oH4wfAIBADB3BgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDFJO3uNHzvK+dO4MpgIBEIBKRYcrbBhLGVqP/2gO7GSLpPik9k6wy2W3tppw2KKLgY"
  "1UEqRY+JG+WU3PVXC5JSzbs9APq4kInrhKmrwURk1Sxf+x8zF/d2givpA=")
decrypted_token = kms_decrypt(kms, encrypted_token)

registry = EFServiceRegistry()
auth_header =  {'X-Api-Key': decrypted_token}

all_policies = requests.get(
    url='https://api.newrelic.com/v2/alerts_policies.json',
    headers=auth_header
)

alert_environments = ["prod", "staging"]

def alert_policy_exists(policy_name):
  """Check to see if an alert policy exists in NewRelic. Return True if so, False if not"""
  if next((policy for policy in all_policies.json()['policies'] if policy['name'] == policy_name), False):
    return True

def create_alert_policy(policy_name):
  """Creates an alert policy in NewRelic"""
  policy_data = { 'policy': { 'incident_preference': 'PER_POLICY', 'name': policy_name } }
  headers = {'X-Api-Key': decrypted_token, 'Content-Type': 'application/json'}
  create_policy = requests.post('https://api.newrelic.com/v2/alerts_policies.json', headers=headers, data=policy_data)
  create_policy.raise_for_status()
  policy_id = create_policy.json()['policy']['id']
  return policy_id

def main():
  for service in registry.iter_services(service_group="application_services"):
    service_name = service[0]
    service_environments = service[1]['environments']
    service_alerts = service[1]['alerts'] if "alerts" in service[1] else {}

    # Set alert values
    memory_warn = int(service_alerts['memory_warn']) if "memory_warn" in service_alerts else 80
    memory_crit = int(service_alerts['memory_crit']) if "memory_crit" in service_alerts else 90

    for env in alert_environments:
      policy_name = "{}-{}".format(env, service_name)
      if env in service_environments and not alert_policy_exists(policy_name):
        create_alert_policy(policy_name)

if __name__ == "__main__":
  main()